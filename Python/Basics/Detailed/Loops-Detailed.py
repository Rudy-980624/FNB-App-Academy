# LOOPS 

# Loops are used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.
# They allow you to execute a block of code repeatedly based on a condition or for each item in a collection.
# Python provides two main types of loops: `for` loops and `while` loops.

# FOR LOOPS
# For loops are used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.
# They allow you to execute a block of code for each item in the sequence.
# Example of a for loop
fruits = ["apple", "banana", "cherry"]  # List of fruits
for fruit in fruits:
    print("Fruit:", fruit)  # Output: Fruit: apple, Fruit: banana, Fruit: cherry
# The loop iterates over each fruit in the list and prints it.

# You can also use the `range()` function to generate a sequence of numbers for iteration.
# Example of using range() in a for loop
for i in range(5):  # Generates numbers from 0 to 4
    print("Number:", i)  # Output: Number: 0, Number: 1, Number: 2, Number: 3, Number: 4
# The loop iterates over the numbers generated by `range()` and prints each number.

# You can also use the `enumerate()` function to get both the index and the value of each item in a sequence.
# Example of using enumerate() in a for loop
for index, fruit in enumerate(fruits):
    print(f"Index: {index}, Fruit: {fruit}")  # Output: Index: 0, Fruit: apple, Index: 1, Fruit: banana, Index: 2, Fruit: cherry
# The loop iterates over each fruit in the list and prints its index along with the fruit name.

# For loops can also be used with dictionaries to iterate over key-value pairs.
# Example of iterating over a dictionary
person_info = {
    "name": "Alice",
    "age": 30,
    "city": "New York"
}  # Dictionary of person information
for key, value in person_info.items():
    print(f"{key}: {value}")  # Output: name: Alice, age: 30, city: New York
# The loop iterates over each key-value pair in the dictionary and prints them.

# For loops can also be nested, meaning you can have a loop inside another loop.
# Example of nested for loops
for i in range(3):  # Outer loop
    for j in range(2):  # Inner loop
        print(f"Outer: {i}, Inner: {j}")  # Output: Outer: 0, Inner: 0, Outer: 0, Inner: 1, Outer: 1, Inner: 0, Outer: 1, Inner: 1, Outer: 2, Inner: 0, Outer: 2, Inner: 1
# The outer loop iterates over the range of 3, and for each iteration, the inner loop iterates over the range of 2.
# The inner loop executes for each iteration of the outer loop, resulting in a combination of both indices.


# WHILE LOOPS
# While loops are used to execute a block of code repeatedly as long as a specified condition is true.
# They are useful when you don't know beforehand how many times you need to iterate.
# Example of a while loop
count = 0  # Initialize a counter
while count < 5:  # Loop until count is less than 5
    print("Count:", count)  # Output: Count: 0, Count: 1, Count: 2, Count: 3, Count: 4
    count += 1  # Increment the counter by 1
# The loop continues until the condition `count < 5` becomes false.

# You can also use the `break` statement to exit a loop prematurely.
# Example of using break in a while loop
count = 0  # Initialize a counter
while True:  # Infinite loop
    if count >= 5:  # Check the condition
        break  # Exit the loop if count is greater than or equal to 5
    print("Count:", count)  # Output: Count: 0, Count: 1, Count: 2, Count: 3, Count: 4
    count += 1  # Increment the counter by 1
# The loop continues indefinitely until the `break` statement is encountered.

# You can also use the `continue` statement to skip the current iteration and move to the next iteration of the loop.
# Example of using continue in a while loop
count = 0  # Initialize a counter
while count < 5:  # Loop until count is less than 5
    count += 1  # Increment the counter by 1
    if count == 3:  # Check if count is equal to 3
        continue  # Skip the rest of the loop for this iteration
    print("Count:", count)  # Output: Count: 1, Count: 2, Count: 4, Count: 5
# The loop increments the counter and skips printing when the count is equal to 3.
# The `continue` statement skips the rest of the loop for that iteration and moves to the next iteration.

# NESTED LOOPS
# Loops can also be nested, meaning you can have a loop inside another loop.
# Example of nested while loops
count1 = 0  # Outer loop counter
while count1 < 3:  # Outer loop condition
    count2 = 0  # Inner loop counter
    while count2 < 2:  # Inner loop condition
        print(f"Outer: {count1}, Inner: {count2}")  # Output: Outer: 0, Inner: 0, Outer: 0, Inner: 1, Outer: 1, Inner: 0, Outer: 1, Inner: 1, Outer: 2, Inner: 0, Outer: 2, Inner: 1
        count2 += 1  # Increment the inner loop counter by 1
    count1 += 1  # Increment the outer loop counter by 1
# The outer loop iterates over the range of 3, and for each iteration, the inner loop iterates over the range of 2.
# The inner loop executes for each iteration of the outer loop, resulting in a combination of both indices.

# ELSE STATEMENT IN LOOPS
# Loops can also be used with the `else` statement, which executes a block of code when the loop completes normally (i.e., not interrupted by a `break` statement).
# Example of using else with a for loop
for i in range(3):  # Loop over the range of 3
    print("Number:", i)  # Output: Number: 0, Number: 1, Number: 2
else:
    print("Loop completed without interruption.")  # Output: Loop completed without interruption.
# The `else` block executes after the loop completes normally, indicating that the loop did not encounter a `break` statement.


# Loops are a fundamental part of programming and are used to automate repetitive tasks, process collections
# of data, and perform operations on sequences.

#_____________________________________________________________________________________

# Loops are a fundamental part of programming and are used to automate repetitive tasks, process collections of data, and perform operations on sequences.
# They allow you to execute a block of code repeatedly based on a condition or for each item
# in a collection.
# Python provides two main types of loops: `for` loops and `while` loops.
# For loops are used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.
# They allow you to execute a block of code for each item in the sequence.
