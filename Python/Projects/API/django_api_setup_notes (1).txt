
Title: Setting Up a Django REST API Environment

Date: 2025-06-26

Description:
This document summarizes the commands and installations performed during the setup of a Django REST API development environment. The steps taken are crucial for building a modern web backend using Django and Django REST Framework.

---

1. **Installing Django REST Framework (DRF)**:
   Command:
       pip install djangorestframework
   Why:
       DRF is a powerful and flexible toolkit for building Web APIs in Django.

2. **Installing Additional Django API Packages**:
   Command:
       pip install djangorestframework django-filter drf-yasg dj-rest-auth
   Why:
       - `django-filter`: For filtering querysets via URL parameters.
       - `drf-yasg`: For auto-generating OpenAPI (Swagger) documentation for DRF.
       - `dj-rest-auth`: For handling user authentication and registration in DRF.

3. **Creating a Virtual Environment**:
   Command:
       python -m venv testenv
   Why:
       Creates a virtual environment to isolate project dependencies.

4. **Activating the Virtual Environment**:
   Command (Windows):
       testenv\Scripts\activate
   Why:
       Activates the isolated environment where packages will be installed.

5. **Installing Django in the Virtual Environment**:
   Command:
       pip install django
   Why:
       Django is the main web framework for the backend project.

6. **Installing UI and Environment Enhancements**:
   Command:
       pip install django-crispy-forms crispy-bootstrap5 python-dotenv
   Why:
       - `django-crispy-forms`: For elegant Django form rendering.
       - `crispy-bootstrap5`: Bootstrap 5 integration for `django-crispy-forms`.
       - `python-dotenv`: To load environment variables from a `.env` file.

---

You are now ready to start building your Django REST API with enhanced features such as filtering, user auth, API docs, and form rendering.


7. **Updating `settings.py` to Register New Apps**:
   File Edited:
       your_project/settings.py
   What was added to `INSTALLED_APPS`:
       'crispy_forms',
       'crispy_bootstrap5',
   Why:
       These packages need to be registered in Djangoâ€™s settings so that Django knows to load and use them. 
       This is required for crispy-forms rendering and Bootstrap 5 integration to work correctly.

